{"version":3,"sources":["components/ProductList.js","actionsCreators.js","components/ShoppingCart.js","App.js","serviceWorker.js","store.js","index.js"],"names":["styles","products","display","alignItems","flexWrap","product","width","marginLeft","marginRight","connect","state","dispatch","addToCart","type","props","react_default","a","createElement","style","map","className","key","id","src","image","alt","name","Button","bsStyle","onClick","role","disabled","inventory","price","class","aria-hidden","footer","fontWeight","cart","removeFromCart","Panel_default","Heading","Table","fill","bsSize","colSpan","reduce","sum","App","Navbar_default","inverse","staticTop","Header","Brand","Grid_default","Row","Col","sm","components_ProductList","components_ShoppingCart","Component","Boolean","window","location","hostname","match","createStore","action","Object","objectSpread","concat","filter","e","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22fe9b73.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { addToCart } from '../actionsCreators';\nimport { connect } from 'react-redux';\n\nconst styles = {\n  products: {\n    display: 'flex',\n    alignItems: 'stretch',\n    flexWrap: 'wrap'\n  },\n  product: {\n    width: '220px',\n    marginLeft: 10,\n    marginRight: 10\n  }\n};\n\nconst ProductList = (props) => {\n  return (\n    <div style={styles.products}>\n      {props.products.map(product =>\n        <div className=\"thumbnail\" style={styles.product} key={product.id}>\n          <img src={product.image} alt={product.name} />\n          <div className=\"caption\">\n            <h4>{product.name}</h4>\n            <p>\n              <Button bsStyle=\"primary\" onClick={() => props.addToCart(product)} role=\"button\" disabled={product.inventory <= 0}>${product.price} <span class=\"glyphicon glyphicon-shopping-cart\" aria-hidden=\"true\"></span></Button>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    products : state.products\n  }\n}\n\nconst mapDispatchToProps = dispatch =>{\n  return {\n    addToCart(product){\n      dispatch(addToCart(product))\n    }\n  };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ProductList);\n","/*\n  Actions creators:\n  son funciones que retornan un action. Son opcionales pero utilizarlas\n  tienen varias ventajas:\n   *Documentan mejor el codigo\n   *evitan tener las cadenas type quemadas por todo el codigo\n   *Facilitan conocer los parÃ¡metros que necesita la aplicacion\n   *Permiten agregar logica adicional\n*/\n\nconst addToCart = product => {\n  return {\n    type:\"ADD_TO_CART\",\n    product\n  }\n}\n\nconst removeFromCart = product => {\n  return {\n    type:\"REMOVE_FROM_CART\",\n    product\n  }\n}\n\nexport {addToCart, removeFromCart}\n","import React from 'react';\nimport { Table, Button } from 'react-bootstrap';\nimport Panel from 'react-bootstrap/lib/Panel';\n/*import store from '../store';*/\nimport { removeFromCart } from '../actionsCreators';\nimport { connect } from 'react-redux';\n\nconst styles = {\n  footer: {\n    fontWeight: 'bold'\n  }\n}\n\n\nconst ShoppingCart = (props) => {\n  return (\n    <Panel>\n      <Panel.Heading>Shopping Cart</Panel.Heading>\n      <Table fill>\n        <tbody>\n          {props.cart.map(product =>\n            <tr key={product.id}>\n              <td>{product.name}</td>\n              <td className=\"text-right\">${product.price}</td>\n              <td className=\"text-right\"><Button bsSize=\"xsmall\" bsStyle=\"danger\" onClick={() => props.removeFromCart(product)}><span className=\"glyphicon glyphicon-trash\" aria-hidden=\"false\"></span></Button></td>\n            </tr>\n          )}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td colSpan=\"4\" style={styles.footer}>\n              Total: ${props.cart.reduce((sum, product) => sum + product.price, 0)}\n            </td>\n          </tr>\n        </tfoot>\n      </Table>\n\n    </Panel>\n  )\n}\n\n/*mapStateToProps es una funcion de react-redux que permite elimiar los state de la clase.\nEsto favorece la creacion de componentes presentacionales, es decir sin ninguna logica */\nconst mapStateToProps = state => {\n  return {\n    cart : state.cart\n  }\n}\n/*mapDispatchToProps es un funcion de react-redux que recibe el dispatch del store y\nretorna un objeto con todos los metodos que se necesitan  */\nconst mapDispatchToProps = dispatch => {\n  return {\n    removeFromCart(product){\n      dispatch(removeFromCart(product))\n    }\n  };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ShoppingCart);\n","import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Grid from 'react-bootstrap/lib/Grid';\nimport Navbar from 'react-bootstrap/lib/Navbar';\nimport ProductList from './components/ProductList';\nimport ShoppingCart from './components/ShoppingCart';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar inverse staticTop>\n          <Navbar.Header>\n            <Navbar.Brand>\n              Ecommerce\n            </Navbar.Brand>\n          </Navbar.Header>\n        </Navbar>\n\n        <Grid>\n          <Row>\n            <Col sm={8}>\n              <ProductList />\n            </Col>\n            <Col sm={4}>\n              <ShoppingCart />\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* Mantiene el estado de la aplicacion de forma centralizada\n  * permite el acceso al estado a traves del getState()\n  * Registra los suscriptores a traves de subscribe(fn).\n  * Permite que el estado sea actualizado a traves del metodo dispatch(action)\n  * El store se crea con el metodo createStore(reduceFn,estado inicial)\n  ---------------\n  La funcion reductora es una funcion que recibe un estado, una accion y retorna\n  un nuevo estado\n  El store invoca la funcion reductora siempre que recibe un llamado al metodo dispatch(action)\n*/\n\nimport { createStore } from 'redux';\n\nconst reducer = (state,action) => {\n  if(action.type === \"ADD_TO_CART\"){\n    return {\n      ...state,\n      cart : state.cart.concat(action.product)\n    }\n  };\n  if(action.type === \"REMOVE_FROM_CART\"){\n    return {\n      ...state,\n      cart : state.cart.filter(e => e.id !== action.product.id),\n    }\n  }\n  return state;\n}\n\nconst products = [\n  { id: 1, name: \"Hipster Ultimate\", price: 299, image: \"https://s3.amazonaws.com/makeitreal/projects/e-commerce/camiseta-1.jpg\" },\n  { id: 2, name: \"On Motion Live\", price: 99, image: \"https://s3.amazonaws.com/makeitreal/projects/e-commerce/camiseta-2.jpg\" },\n  { id: 3, name: \"Underground Max\", price: 149, image: \"https://s3.amazonaws.com/makeitreal/projects/e-commerce/camiseta-3.jpg\" },\n]\n\nexport default createStore(reducer,{cart:[],products:products});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}